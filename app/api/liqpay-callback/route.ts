import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'
import querystring from 'querystring'
import { prisma } from '@/prisma/prisma-client'
import { OrderStatus } from '@prisma/client'
import { PaymentCallbackDatat } from '@/@types/liqpay'
import { CartItemDTO } from '@/shared/services/dto/cart.dto'
import { sendEmail } from '@/shared/lib'
import { OrderSuccessTemplate, Order–°anceledTemplate } from '@/shared/components'

export async function POST(req: NextRequest) {
  try {
    // –ß–∏—Ç–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    const body = await req.text()

    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const parsedBody = querystring.parse(body)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ 'data' —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ –º–∞—Å—Å–∏–≤–æ–º
    const data = Array.isArray(parsedBody.data)
      ? parsedBody.data[0]
      : parsedBody.data

    if (!data || typeof data !== 'string') {
      return new Response('Invalid data format', { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ 'signature' —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
    const signature = Array.isArray(parsedBody.signature)
      ? parsedBody.signature[0]
      : parsedBody.signature

    if (!signature || typeof signature !== 'string') {
      return new Response('Invalid signature format', { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    const validSignature = crypto
      .createHash('sha1')
      .update(
        process.env.LIQPAY_PRIVATE_KEY + data + process.env.LIQPAY_PRIVATE_KEY
      )
      .digest('base64')

    if (signature !== validSignature) {
      return new Response('Invalid signature', { status: 400 })
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const decodedData = JSON.parse(
      Buffer.from(data, 'base64').toString('utf-8')
    ) as PaymentCallbackDatat

    // –ü–æ–ª—É—á–µ–Ω–∏–µ payment_id
    const paymentId = decodedData.payment_id
    const orderId = decodedData.order_id
    console.log('Payment ID:', paymentId, orderId, decodedData)

    const order = await prisma.order.findFirst({
      where: {
        id: Number(orderId),
      },
    })

    if (!order) {
      return NextResponse.json({ error: 'Order not found' })
    }

    // –ó–¥–µ—Å—å –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å paymentId –∏ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    const isSucceeded = decodedData.status === 'success'

    await prisma.order.update({
      where: {
        id: order.id,
      },
      data: {
        paymentId: paymentId.toString(),
        status: isSucceeded ? OrderStatus.SUCCEEDED : OrderStatus.CANCELLED,
      },
    })

    const items = order?.items as unknown as CartItemDTO[]

    if (isSucceeded) {
      await sendEmail(
        order.email,
        ' Next Pizza / –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω üéâ',
        OrderSuccessTemplate({ orderId: order.id, items: items })
      )
    } else {
      await sendEmail(
        order.email,
        'Next Pizza / –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #' + order.id +'–æ—Ç–º–µ–Ω–µ–Ω–∞',
        Order–°anceledTemplate({ orderId: order.id })
      )
    }

    return new Response('OK', { status: 200 })
  } catch (error) {
    console.error('Error in LiqPay callback:', error)
    return new Response('Internal Server Error', { status: 500 })
  }
}
